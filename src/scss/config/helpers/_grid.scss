$grid_size: 12;
$max-grid: $max-width;
$grid-gutter: 2;
$min-item: 300;
$break: 2;
%grid_container {
  font-size: 0;
}

[class^="item-"] {
  display: inline-block;
  vertical-align: top;
  width: calc(100% - #{($grid-gutter / 2)}rem);
}

.item-#{$grid_size}-#{$grid_size} {
  width: 100%;
}

@supports (display: flex) {
  %grid {
    display: flex;
  }
  %grid-inline {
    display: inline-flex;
  }
  %grid_container {}
  %grid_column {
    flex-direction: column;
  }
  %grid_column-reverse {
    flex-direction: column-reverse;
  }
  %grid_row {
    flex-direction: row;
  }
  %grid_row-reverse {
    flex-direction: row-reverse;
  }
  %grid_wrap {
    flex-wrap: wrap;
  }
  %grid_wrap-none {
    flex-wrap: nowrap;
  }
  %grid_wrap-reverse {
    flex-wrap: wrap-reverse;
  }
  %justify-start {
    justify-content: flex-start;
  }
  %justify-end {
    justify-content: flex-end;
  }
  %justify-center {
    justify-content: center;
  }
  %justify-between {
    justify-content: space-between;
  }
  %justify-around {
    justify-content: space-around;
  }
  %align-stretch {
    align-items: stretch;
  }
  %align-start {
    align-items: flex-start;
  }
  %align-end {
    align-items: flex-end;
  }
  %align-center {
    align-items: center;
  }
}

.grid {
  @extend %grid;
  @extend %grid_row;
  @extend %grid_wrap;
  @extend %align-stretch;
  @extend %justify-between;
}

.grid-central {
  @extend %central-column;
}

.grid-table {
  display: block;
  width: 100%;
  tbody {
    display: block;
    width: 100%;
  }
  tr {
    @extend %grid;
    @extend %grid_row;
    @extend %align-stretch;
    @extend %justify-between;
    width: 100%;
    th {
      text-align: left;
    }
    td {
      text-align: right;
    }
    .divider {
      flex-grow: 1;
      border-bottom: 0.125rem dotted rgba($clr_black, $opacity-backdrop-decimal);
      transform: translateY(-0.9em);
      margin-right: 0.25rem;
      margin-left: 0.25rem;
    }
  }
}

.item-aligned-last-right {
  [class*="item-"]:last-of-type {
    text-align: right;
  }
}

@media (min-width: #{($min-item * $break)}px) {
  @for $i from 1 through ($grid_size - 1) {
    $one: (100% / $grid_size);
    $size: $one * $i;
    %item-#{$i}-#{$grid_size},
    .item-#{$i}-#{$grid_size} {
      width: unquote(calc(#{$size} - #{($grid-gutter / 2)}rem));
    }
  }
}